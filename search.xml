<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>OpenStack Neutron trunk ports</title>
    <url>/2023/06/21/Neutron-trunk%20ports/</url>
    <content><![CDATA[<p>​     OpenStack Neutron trunk ports （VLAN-aware-VMs）,”VLAN aware VMs”有时也叫做”VM trunk ports”, 主要是让虚拟机收发的vlan tagged报文, 能够被虚拟网络所识别和处理。</p>
<p>什么是主机的Trunk port？一般来说VLAN只是对交换机可知，主机不感知VLAN，也就是主机网卡发送出来的数据是不带VLAN Tag的。当主机将网卡配置成Trunk port，会在主机的Trunk port上添加多个带有不同VLAN ID的子网卡。通过子网卡发送的数据，会打上VLAN Tag，被发送出去。由于主机发送的网络数据有了变化（带上了VLAN Tag），对主机连接的网络提出了新的要求。另一方面，由于带了不同的VLAN Tag，子网卡可以认为连接在VLAN Tag标识的网络中。这样，不用实际增减主机的网卡，只需要为主机创建带VLAN ID的子网卡，就可以将主机添加到新的VLAN网络中。</p>
<p>​     OpenStack对VLAN Trunk的支持就是指对OpenStack所管理的虚机的Trunk port，提供网络支持。大多数场景下，主机收发的是不带tag的报文，但是在实际环境中，无论是windows还是Linux环境都通过各自的方法可以收发带有vlan tag的报文。 而一个虚机要想接收不同vlan tag的报文，就需要在虚机上接入不同网络，即在虚机上配置不同网络的虚拟网卡。在NFV（Network Function Virtualization）场景下，若网络数量巨大，网卡数量也巨大，这种实现的方法就不现实；另一方面，连接的多个网络也是动态增减的，如果每次都增减网卡明显也是不方便的。如果使用Trunk port，当需要动态连接多个网络时，只需要动态的创建/删除相应的子网卡即可</p>
<p>​      OpenStack中虚机的 Trunk port 设置步骤如下：</p>
<ul>
<li>需要在网络节点的neutron.conf里配置service_plugins为: “trunk”</li>
<li>创建网络，如 net0(parent-net), net1,net2等，租户需要几个vlan网络，就需要创建几个对应net</li>
<li>创建 parentport 端口，一个vm对应一个parentport</li>
<li>创建 trunk，每一个trunk实例中包含一个parentport, 和若干个其他子接口netport</li>
<li>创建 vm，指定parentport；在vm内创建子接口接口，并获取 dhcp 地址</li>
</ul>
]]></content>
      <categories>
        <category>openstack</category>
      </categories>
  </entry>
  <entry>
    <title>Neutron-l3-agent</title>
    <url>/2023/06/21/Neutron-l3-agent/</url>
    <content><![CDATA[<p>Neutron 的路由服务是由 l3 agent 提供的。 除此之外，l3 agent 通过 iptables 提供 firewall 和 floating ip 服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">openstack network agent list --host network01</span><br>+--------------------------------------+--------------------+------------+-------------------+-------+-------+---------------------------+<br>| ID                                   | Agent Type         | Host       | Availability Zone | Alive | State | Binary                    |<br>+--------------------------------------+--------------------+------------+-------------------+-------+-------+---------------------------+<br>| 178352d1-b827-402b-8ac8-f2529f8c0079 | Metadata agent     | network01 | None              | :-)   | UP    | neutron-metadata-agent    |<br>| 4ace5ae6-ce68-4dfb-85b9-7e1ca139c21f | DHCP agent         | network01 | nova              | :-)   | UP    | neutron-dhcp-agent        |<br>| 90a46a2a-80cf-400f-a5fd-a620155c0a4c | Open vSwitch agent | network01 | None              | :-)   | UP    | neutron-openvswitch-agent |<br>| fac20f42-457a-486f-92c8-1d3eb6f1c39e | L3 agent           | network01 | nova              | :-)   | UP    | neutron-vpn-agent         |<br>+--------------------------------------+--------------------+------------+-------------------+-------+-------+---------------------------+<br></code></pre></td></tr></table></figure>

<p>根据 路由id 可以找到本 router 所在的网络节点</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">openstack router list  --project <span class="hljs-built_in">test</span></span><br>+--------------------------------------+----------------+--------+-------+----------------------------------+-------------+------+<br>| ID                                   | Name           | Status | State | Project                          | Distributed | HA   |<br>+--------------------------------------+----------------+--------+-------+----------------------------------+-------------+------+<br>| 2878b574-9793-45a5-bf39-04e1092fb697 | Default Router | ACTIVE | UP    | 8923b95c43414065a7dcfee1f4d6477b | False       | True |<br>+--------------------------------------+----------------+--------+-------+----------------------------------+-------------+------+<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">获取该路由上的 业务 IP</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">openstack floating ip list --router 2878b574-9793-45a5-bf39-04e1092fb697</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">环境为高可用主备router节点，HA State 为 standby 表示待用状态</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">openstack network agent list --router 2878b574-9793-45a5-bf39-04e1092fb697 --long</span><br>+--------------------------------------+------------+------------+-------------------+-------+-------+-------------------+----------+<br>| ID                                   | Agent Type | Host       | Availability Zone | Alive | State | Binary            | HA State |<br>+--------------------------------------+------------+------------+-------------------+-------+-------+-------------------+----------+<br>| 8add8415-5956-462a-93d1-e9a97c7a3cbe | L3 agent   | network02 | nova              | :-)   | UP    | neutron-vpn-agent | active   |<br>| e123a05b-fe85-4207-b0aa-ff2a3a9169e4 | L3 agent   | network03 | nova              | :-)   | UP    | neutron-vpn-agent | standby  |<br>+--------------------------------------+------------+------------+-------------------+-------+-------+-------------------+----------+<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">[root@network02~]# </span><span class="language-bash">ip netns <span class="hljs-built_in">ls</span>  |grep  2878b574-9793-45a5-bf39-04e1092fb697</span><br>qrouter-2878b574-9793-45a5-bf39-04e1092fb697 (id: 36)<br><br><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>openstack</category>
      </categories>
      <tags>
        <tag>openstack</tag>
      </tags>
  </entry>
  <entry>
    <title>ceph-ansible配置文件详解</title>
    <url>/2023/06/21/ceph-ansible%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<blockquote>
<p>官网链接：<a href="https://github.com/ceph/ceph-ansible/">https://github.com/ceph/ceph-ansible/</a></p>
<p>官网安装手册：<a href="https://docs.ceph.com/projects/ceph-ansible/en/latest/">https://docs.ceph.com/projects/ceph-ansible/en/latest/</a></p>
<p>Red Hat Ceph：<a href="https://access.redhat.com/documentation/zh-cn/red_hat_ceph_storage/6">https://access.redhat.com/documentation/zh-cn/red_hat_ceph_storage/6</a></p>
</blockquote>
<h2 id="1、主机组说明"><a href="#1、主机组说明" class="headerlink" title="1、主机组说明"></a>1、主机组说明</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[mons]   作为Monitor节点<br><br><br>[mgrs]   作为MGR节点<br><br><br>[osds]   作为OSD节点，具体OSD配置在osds.yml文件中配置<br><br><br>[mdss]   作为MDS节点，文件存储中需要指定<br><br><br>[rgws]   作为RGW节点，对象存储中需要指定<br><br><br>[clients]   作为客户端节点<br><br><br>[grafana-server]<br>一般需要保留该参数，不然会报缺少的错误<br></code></pre></td></tr></table></figure>



<h2 id="2、配置项说明"><a href="#2、配置项说明" class="headerlink" title="2、配置项说明"></a>2、配置项说明</h2><p><code> ceph_origin:</code>   指定 ceph 安装源，目前支持 3 种主要安装方法  repository、distro、local </p>
<ul>
<li><p>repository:  使用仓库源，若指定此项，则须配置以下配置项：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">表示使用ceph社区的版本，ceph-ansible也可以安装rhcs等厂家发行的版本</span><br>ceph_repository: community<br>ceph_mirror: http://mirrors.163.com/ceph<br>ceph_stable_release: octopus   <br></code></pre></td></tr></table></figure></li>
<li><p>distro:  表示不自动配置源</p>
</li>
<li><p>local :  表示从本地计算机——即ceph-admin节点去复制ceph二进制文件分发至其他节点</p>
</li>
</ul>
<p><code>configure_firewall: </code>   是否配置防火墙，如果设置为true，ceph-ansible会自动去配置集群内组件相互通信所需的防火墙规则，默认情况下，Ansible 会尝试重启已安装但屏蔽的 firewalld 服务，这可能会导致Ceph Storage 部署失败。要临时解决这个问题，请在将 <code>configure_firewall</code> 选项设置为 <code>false</code></p>
<p><code>osd_scenario:</code>   </p>
<ul>
<li><p>collocated: 使用相同的设备进行写入日志记录和键/值数据(BlueStore)或日志(FileStore)和 OSD 数据</p>
</li>
<li><p>non-collocated:  为使用专用设备，如 SSD 或 NVMe 介质，以存储 write-ahead 日志和键/值数据(BlueStore)或日志数据(FileStore)</p>
</li>
<li><p>LVM: 使用逻辑卷管理器存储 OSD 数据</p>
</li>
</ul>
<p><code>lvm_volumes:</code>   FileStore 或 BlueStore 字典列表：如果使用 <code>osd_scenario: lvm</code>且存储设备没有使用 <code>devices</code>定义 时为 Yes</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts">OSD 方案 示例：<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">osd_objectstore:</span> bluestore<br><span class="hljs-symbol">osd_scenario:</span> lvm<br><span class="hljs-symbol">devices:</span><br>  - <span class="hljs-keyword">/dev/</span>sda<br>  - <span class="hljs-keyword">/dev/</span>sdb<br></code></pre></td></tr></table></figure>



<p><code>osd_objectstore:  </code>    可选 filestore bluestore SeaStore</p>
<p>SeaStore面向全NVME场景设计<br>对象存储引擎，如有必要可以将其更改为filestore</p>
<p><code>osd_auto_discovery: true</code>   </p>
<p>是否启用OSD设备自动发现，如果这个选项设置为true，将不再需要填写osds.yml中的device设置<br>因为ceph-ansible将会使用ansible_devices发现的所有可用的块设备,已有分区表的设备将不会被使用<br>因此默认不会将系统盘做成OSD</p>
<p><code>osd_auto_discovery_exclude</code>   用于设置一个规则来排除指定的设备做成 osd </p>
<p>例如：rbd* 表示所有rbd开头的设备将不会被自动创建为osd</p>
<p><code>crush_rule_config:</code>  设置为 <code>True</code>  自定义 CRUSH 规则</p>
<p><strong>HDD</strong> 设备，请按如下所示编辑参数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs none">crush_rule_config: True<br>crush_rule_hdd:<br>    name: replicated_hdd_rule<br>    root: root-hdd<br>    type: host<br>    class: hdd<br>    default: True<br>crush_rules:<br>  - &quot;&#123;&#123; crush_rule_hdd &#125;&#125;&quot;<br>create_crush_tree: True<br></code></pre></td></tr></table></figure>

<p>如果使用 <strong>SSD</strong> 设备，请按如下所示编辑参数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs none">crush_rule_config: True<br>crush_rule_ssd:<br>    name: replicated_ssd_rule<br>    root: root-ssd<br>    type: host<br>    class: ssd<br>    default: True<br>crush_rules:<br>  - &quot;&#123;&#123; crush_rule_ssd &#125;&#125;&quot;<br>create_crush_tree: True<br></code></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>ceph</category>
      </categories>
      <tags>
        <tag>ceph</tag>
        <tag>ceph-ansible</tag>
      </tags>
  </entry>
  <entry>
    <title>kolla-ansible 部署报错</title>
    <url>/2023/05/24/kolla-ansible-issue/</url>
    <content><![CDATA[<h2 id="问题现象："><a href="#问题现象：" class="headerlink" title="问题现象："></a>问题现象：</h2><p>环境：系统 centos7，通过 kolla-ansible 部署 train 版 Openstack，在 deploy 部署阶段执行到任务 </p>
<p>TASK [service-rabbitmq : nova | Ensure RabbitMQ users exist] 报错 FAILED - RETRYING: nova | Ensure RabbitMQ users exist (5 retries left). 详情如下图：</p>
<p><img src="/2023/05/24/kolla-ansible-issue/1.png"></p>
<h2 id="问题分析："><a href="#问题分析：" class="headerlink" title="问题分析："></a>问题分析：</h2><p>查询相关博客给出的解决办法是清理部署环境，重新部署。但我清理多次部署还是会报错如上图。</p>
<p>后谷歌相关资料，发现很多人部署都出现过这个问题，其实是 kolla-ansible 的一个bug，需要修改一下配置文件。并且This issue was fixed in the openstack/kolla-ansible 14.0.0.0rc1 release candidate.</p>
<p><a href="https://bugs.launchpad.net/kolla-ansible/+bug/1946506">原文链接</a></p>
<h2 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">vi /usr/share/kolla-ansible/ansible/roles/service-rabbitmq/tasks/main.yml <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">在第 21 行 添加如下代码</span><br><br>node: &quot;rabbit@&#123;&#123; ansible_facts.hostname &#125;&#125;&quot;<br></code></pre></td></tr></table></figure>

<p>如图：</p>
<p><img src="/2023/05/24/kolla-ansible-issue/2.jpeg"></p>
<p>此时再去执行 deploy，安装成功 </p>
]]></content>
      <categories>
        <category>openstack</category>
      </categories>
  </entry>
  <entry>
    <title>kolla-ansible 部署 openstack—train</title>
    <url>/2023/06/21/kolla%E9%83%A8%E7%BD%B2openstack-Train/</url>
    <content><![CDATA[<h1 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h1><p>系统：centos7<br>三台云主机</p>
<h1 id="节点规划"><a href="#节点规划" class="headerlink" title="节点规划"></a>节点规划</h1><table>
<thead>
<tr>
<th>主机名</th>
<th>ip 地址</th>
<th>角色</th>
<th>内存/CPU</th>
<th>网卡—eth0</th>
<th>网卡—eth1</th>
</tr>
</thead>
<tbody><tr>
<td>controller</td>
<td>192.168.100.11</td>
<td>控制节点</td>
<td>8G/2核</td>
<td>192.168.100.11</td>
<td>none</td>
</tr>
<tr>
<td>compute</td>
<td>192.168.100.9</td>
<td>计算节点</td>
<td>8G/2核</td>
<td>192.168.100.9</td>
<td>none</td>
</tr>
<tr>
<td>storage</td>
<td>192.168.100.4</td>
<td>存储节点</td>
<td>8G/2核</td>
<td>192.168.100.4</td>
<td>none</td>
</tr>
</tbody></table>
<h1 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h1><h2 id="一-、基础环境准备："><a href="#一-、基础环境准备：" class="headerlink" title="(一)、基础环境准备："></a>(一)、基础环境准备：</h2><p><strong>++ 所有节点操作================</strong></p>
<h3 id="1、-修改主机名-amp-配置主机映射"><a href="#1、-修改主机名-amp-配置主机映射" class="headerlink" title="1、 修改主机名&amp;配置主机映射"></a>1、 修改主机名&amp;配置主机映射</h3><h3 id="2、-关闭-防火墙-amp-selinux"><a href="#2、-关闭-防火墙-amp-selinux" class="headerlink" title="2、 关闭 防火墙&amp;selinux"></a>2、 关闭 防火墙&amp;selinux</h3><h3 id="3、-ssh-免密配置"><a href="#3、-ssh-免密配置" class="headerlink" title="3、 ssh 免密配置"></a>3、 ssh 免密配置</h3><blockquote>
<p>部署节点和其他节点免密登陆</p>
</blockquote>
<h3 id="4、-安装配置-docker"><a href="#4、-安装配置-docker" class="headerlink" title="4、 安装配置 docker"></a>4、 安装配置 docker</h3><blockquote>
<p>开启 Docker 的共享挂载功能：所谓共享挂载即同一个目录或设备可以挂载到多个不同的路径并且能够保持互相之间的共享可见性，类似于 mount –shared。在 OpenStack for Kolla 中，主要解决 Neutron 的 namespace 在不同 container 中得以保持实效性的问题。</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">安装 docker</span><br>yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<br>yum install -y docker-ce<br>systemctl enable docker &amp;&amp; systemctl start docker<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置 Docker 的镜像源</span><br>mkdir -p /etc/docker<br>vim /etc/docker/daemon.json <br>&#123; <br>&quot;registry-mirrors&quot;: [&quot;https://docker.mirrors.ustc.edu.cn&quot;] <br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置 Docker 挂载卷的方式为 Share</span><br>mkdir -p /etc/systemd/system/docker.service.d<br>cat /etc/systemd/system/docker.service.d/kolla.conf <br>[Service] <br>MountFlags=shared<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">重启 docker</span><br>systemctl daemon-reload &amp;&amp; systemctl restart docker<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看 docker 信息</span><br>docker info<br><br></code></pre></td></tr></table></figure>
<h3 id="5、-设置-pip-下载源"><a href="#5、-设置-pip-下载源" class="headerlink" title="5、 设置 pip 下载源"></a>5、 设置 pip 下载源</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">mkdir .pip<br>cat &gt; .pip/pip.conf &lt;&lt; EOF<br>[global]<br>index-url=http://mirrors.aliyun.com/pypi/simple/<br>[install]<br>trusted-host=mirrors.aliyun.com<br>EOF<br><br></code></pre></td></tr></table></figure>

<h3 id="6、-安装-pip"><a href="#6、-安装-pip" class="headerlink" title="6、  安装 pip"></a>6、  安装 pip</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">安装 pip</span><br><br>curl https://bootstrap.pypa.io/pip/2.7/get-pip.py -o get-pip27.py<br>python get-pip27.py<br><br></code></pre></td></tr></table></figure>

<p><strong>++ controller 节点操作================</strong></p>
<h3 id="7、-安装-ansible-kolla-ansible"><a href="#7、-安装-ansible-kolla-ansible" class="headerlink" title="7、  安装 ansible/kolla-ansible"></a>7、  <strong>安装 ansible/kolla-ansible</strong></h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">安装 ansible</span><br>pip install ansible===2.9.0<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装 kolla-anisble</span><br>pip install pbr<br>pip install kolla-ansible --ignore-installed requests<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"> 根据报错可选安装</span><br>pip install setuptools-scm<br>pip install -U setuptools<br>pip install kolla-ansible --ignore-installed PyYAML<br><br></code></pre></td></tr></table></figure>

<h3 id="8、-安装配置-python-虚拟环境"><a href="#8、-安装配置-python-虚拟环境" class="headerlink" title="8、  安装配置 python 虚拟环境"></a>8、  <strong>安装配置 python 虚拟环境</strong></h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">安装 Python virtualenv 相关依赖</span><br>yum -y install python-virtualenv  <br>mkdir /opt/kolla<br>virtualenv /opt/kolla/<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建并激活一个 Python 虚拟环境</span><br>source /opt/kolla/bin/activate    <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">退出虚拟环境</span><br>deactivate<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除虚拟环境，只需删除对应的虚拟环境文件夹即可</span><br><br></code></pre></td></tr></table></figure>


<h2 id="（二）-配置-kolla-ansible："><a href="#（二）-配置-kolla-ansible：" class="headerlink" title="（二）  配置 kolla-ansible："></a>（二）  <strong>配置 kolla-ansible：</strong></h2><h3 id="1、-复制模版文件"><a href="#1、-复制模版文件" class="headerlink" title="1、  复制模版文件"></a>1、  <strong>复制模版文件</strong></h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">cp /usr/share/kolla-ansible/etc_examples/kolla/* /etc/kolla/<br>cp /usr/share/kolla-ansible/ansible/inventory/* /etc/kolla/<br></code></pre></td></tr></table></figure>

<h3 id="2、修改部署配置文件—globals-yml"><a href="#2、修改部署配置文件—globals-yml" class="headerlink" title="2、修改部署配置文件—globals.yml"></a>2、修改部署配置文件—globals.yml</h3><blockquote>
<p>可根据需要自行改</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">---<br>kolla_base_distro: &quot;centos&quot;<br>kolla_install_type: &quot;source&quot;<br>openstack_release: &quot;train&quot;<br>kolla_internal_vip_address: &quot;192.168.100.11&quot;<br>network_interface: &quot;eth0&quot;<br>neutron_external_interface: &quot;eth1&quot;<br>enable_haproxy: &quot;no&quot;<br>enable_cinder: &quot;no&quot;<br>nova_compute_virt_type: &quot;qemu&quot;<br></code></pre></td></tr></table></figure>

<h3 id="3、编辑文件—multinode"><a href="#3、编辑文件—multinode" class="headerlink" title="3、编辑文件—multinode"></a>3、编辑文件—multinode</h3><h3 id="4、配置密码文件—passwords-yml"><a href="#4、配置密码文件—passwords-yml" class="headerlink" title="4、配置密码文件—passwords.yml"></a>4、配置密码文件—passwords.yml</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">生成密码至 passwords.yml</span><br>kolla-genpwd<br></code></pre></td></tr></table></figure>

<h2 id="（三）-部署-openstack-环境"><a href="#（三）-部署-openstack-环境" class="headerlink" title="（三） 部署 openstack 环境"></a>（三） 部署 openstack 环境</h2><h3 id="1、安装-openstack-云平台"><a href="#1、安装-openstack-云平台" class="headerlink" title="1、安装 openstack 云平台"></a>1、安装 openstack 云平台</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">测试节点连通性</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">bootstrap-server安装 OpenStack 所需的依赖包</span><br>kolla-ansible -i multinode bootstrap-servers<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">检查配置</span><br>kolla-ansible prechecks  -i multinode <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">下载openstack各个组件容器镜像</span> <br>kolla-ansible pull -i /etc/kolla/multinode<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-vvv: 此参数添加，可打印出详情</span><br>kolla-ansible -i multinode deploy <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">生成环境脚本</span><br>kolla-ansible post-deploy /etc/kolla/admin-openrc.sh<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">遇到报错，销毁已安装的环境</span><br>kolla-ansible  destroy  ./multinode    --yes-i-really-really-mean-it<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">调整配置及重新部署</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">编辑 globals.yml 后, 然后运行 reconfigure 使用 -t 参数可以只对变动的模块进行调整</span><br>kolla-ansible -i /etc/kolla/multinode reconfigure -t neutron<br>kolla-ansible -i /etc/kolla/multinode  deploy -t neutron<br><br></code></pre></td></tr></table></figure>

<h3 id="2、安装-openstack-客户端"><a href="#2、安装-openstack-客户端" class="headerlink" title="2、安装 openstack 客户端"></a>2、安装 openstack 客户端</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker run -d --name client \<br>  --restart always \<br>  -v /etc/kolla/admin-openrc.sh:/admin-openrc.sh:ro \<br>  -v /usr/share/kolla-ansible/init-runonce:/init-runonce:rw \<br>  kolla/centos-binary-openstack-base:train sleep infinity<br> <br>docker exec -it client bash<br>source /admin-openrc.sh<br>openstack service list<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>openstack</category>
      </categories>
      <tags>
        <tag>openstack</tag>
        <tag>kolla</tag>
      </tags>
  </entry>
  <entry>
    <title>Ceph-ansible 安装ceph-pacific</title>
    <url>/2023/06/28/Ceph-ansible%E9%83%A8%E7%BD%B2ceph/</url>
    <content><![CDATA[<h2 id="安装环境："><a href="#安装环境：" class="headerlink" title="安装环境："></a>安装环境：</h2><table>
<thead>
<tr>
<th>主机名</th>
<th>os</th>
<th>角色</th>
<th>public_ip</th>
<th>cluster_ip</th>
<th>osd磁盘</th>
</tr>
</thead>
<tbody><tr>
<td>Ceph-1</td>
<td>CentOS 8</td>
<td>Mon,mgr,osd</td>
<td>192.168.1.11</td>
<td>192.168.2.10</td>
<td>vdb/vdc</td>
</tr>
<tr>
<td>Ceph-2</td>
<td>CentOS 8</td>
<td>Mon,mgr,osd</td>
<td>192.168.1.14</td>
<td>192.168.2.12</td>
<td>vdb/vdc</td>
</tr>
<tr>
<td>Ceph-2</td>
<td>CentOS 8</td>
<td>osd</td>
<td>192.168.1.5</td>
<td>192.168.2.8</td>
<td>vdb/vdc</td>
</tr>
</tbody></table>
<h2 id="1、修改主机名"><a href="#1、修改主机名" class="headerlink" title="1、修改主机名"></a>1、修改主机名</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">hostnamectl set-hostname ceph-1<br>hostnamectl set-hostname ceph-2<br>hostnamectl set-hostname ceph-3<br></code></pre></td></tr></table></figure>



<h2 id="2、修改-etc-hosts-文件"><a href="#2、修改-etc-hosts-文件" class="headerlink" title="2、修改 /etc/hosts 文件"></a>2、修改 /etc/hosts 文件</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">cat &gt;&gt;/etc/hosts&lt;&lt;EOF<br>192.168.1.11 ceph-1<br>192.168.1.14 ceph-2<br>192.168.1.5 ceph-3<br>EOF<br></code></pre></td></tr></table></figure>



<h2 id="3、节点免密"><a href="#3、节点免密" class="headerlink" title="3、节点免密"></a>3、节点免密</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[root@ceph-1 ~]# ssh-keygen<br>Generating public/private rsa key pair.<br>Enter file in which to save the key (/root/.ssh/id_rsa): <br>Enter passphrase (empty for no passphrase): <br>Enter same passphrase again: <br>Your identification has been saved in /root/.ssh/id_rsa.<br>Your public key has been saved in /root/.ssh/id_rsa.pub.<br>The key fingerprint is:<br>SHA256:3Rwq/ejDgnugo4sur6AldSsfRQa1mMzI5EgHmEVwh/8 root@ceph-1<br>The key&#x27;s randomart image is:<br>+---[RSA 3072]----+<br>|oB*oo..          |<br>|+*o= + .         |<br>|. +.= +     .    |<br>|    .o   o + .   |<br>|  . ... S + o    |<br>| . . oE  . o     |<br>|o o o. o .. .    |<br>|++ oo.. o.o      |<br>|*++o...o ...     |<br>+----[SHA256]-----+<br>[root@ceph-1 ~]# ssh-copy-id 192.168.1.14<br>[root@ceph-1 ~]# ssh-copy-id 192.168.1.5<br></code></pre></td></tr></table></figure>



<h2 id="4、修改yum-源"><a href="#4、修改yum-源" class="headerlink" title="4、修改yum 源"></a>4、修改yum 源</h2><p>CentOS 8仓库已经于2022年关闭了,yum 源无法正常使用，否则安装会报错  “仓库 ‘appstream’ 下载元数据失败 : Cannot prepare internal mirrorlist:”</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">cd /etc/yum.repos.d/<br>mkdir bak<br>mv CentOS-Linux-* bak/<br>wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-vault-8.5.2111.repo<br>yum clean all<br>yum makecache<br></code></pre></td></tr></table></figure>



<h2 id="5、配置节点时间同步"><a href="#5、配置节点时间同步" class="headerlink" title="5、配置节点时间同步"></a>5、配置节点时间同步</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">dnf -y install chrony<br>systemctl start chronyd<br><br>[root@ceph-1 ~]# cat /etc/chrony.conf  |grep -v  &quot;^#&quot; |grep -v &quot;^$&quot;<br>pool 2.centos.pool.ntp.org iburst<br>server ntp.aliyun.com iburst<br>driftfile /var/lib/chrony/drift<br>makestep 1.0 3<br>rtcsync<br>allow 192.168.1.0/24<br>keyfile /etc/chrony.keys<br>leapsectz right/UTC<br>logdir /var/log/chrony<br><br>[root@ceph-2 .ssh]# cat /etc/chrony.conf  |grep -v  &quot;^#&quot; |grep -v &quot;^$&quot;<br>server  192.168.1.11  iburst<br>driftfile /var/lib/chrony/drift<br>makestep 1.0 3<br>rtcsync<br>keyfile /etc/chrony.keys<br>leapsectz right/UTC<br>logdir /var/log/chrony<br><br>节点3与节点2配置文件/etc/chrony.conf 内容一样<br></code></pre></td></tr></table></figure>

<p>验证时间同步状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">chronyc sources -v<br></code></pre></td></tr></table></figure>

<p><img src="/2023/06/28/Ceph-ansible%E9%83%A8%E7%BD%B2ceph/image-20230626165654294.png"></p>
<h2 id="6、获取ceph-ansible部署包"><a href="#6、获取ceph-ansible部署包" class="headerlink" title="6、获取ceph-ansible部署包"></a>6、获取ceph-ansible部署包</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">wget https://github.com/ceph/ceph-ansible/archive/refs/heads/stable-6.0.zip -O ceph-ansible-stable-6.0.zip<br>unzip ceph-ansible-stable-6.0.zip<br>cd ceph-ansible-stable-6.0<br>pip install -r requirements.txt	 # 进行安装ansible和其它依赖<br></code></pre></td></tr></table></figure>



<h2 id="7、定义主机清单hosts文件"><a href="#7、定义主机清单hosts文件" class="headerlink" title="7、定义主机清单hosts文件"></a>7、定义主机清单hosts文件</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">cd ceph-ansible-stable-6.0/<br>vi hosts<br><br>[mons] <br>ceph-1<br>ceph-2<br><br>[mgrs]<br>ceph-1<br>ceph-2<br><br>[osds]<br>ceph-1<br>ceph-2<br>ceph-3<br><br>[monitoring]<br>ceph-1<br>ceph-2<br></code></pre></td></tr></table></figure>



<h2 id="8、配置ceph安装参数"><a href="#8、配置ceph安装参数" class="headerlink" title="8、配置ceph安装参数"></a>8、配置ceph安装参数</h2><p>安装参数详解见另一篇文章:<a href="/2023/06/21/ceph-ansible%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/" title="ceph-ansible配置文件详解">ceph-ansible配置文件详解</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">cd ceph-ansible-stable-6.0/group_vars/<br>mv all.yml.sample all.yml<br>mv osds.yml.sample osds.yml	<br><br>[root@ceph-1 group_vars]# cat all.yml <br>---<br>dummy:<br>mon_group_name: mons<br>osd_group_name: osds<br>mgr_group_name: mgrs<br>monitoring_group_name: monitoring<br>ceph_origin: repository<br>ceph_repository: community<br>ceph_mirror: https://mirrors.tuna.tsinghua.edu.cn/ceph/         # ceph安装源<br>ceph_stable_key: https://mirrors.tuna.tsinghua.edu.cn/ceph/keys/release.asc<br>ceph_stable_release: pacific    <br>monitor_interface: ens3   # ceph-mon节点服务监听网卡<br>monitor_address_block: 192.168.1.0/24   # ceph-mon节点服务监听地址所在网段<br>ip_version: ipv4<br>public_network: 192.168.1.0/24  # public-netework子网<br>cluster_network: 192.168.2.0/24 # cluster-network子网<br>osd_objectstore: bluestore              # osd使用的存储后端<br>dashboard_enabled: True         # 启用ceph-dashboard<br>dashboard_admin_user: admin     # ceph-dashboard用户名和密码<br>dashboard_admin_password: Admin@123<br>grafana_admin_user: admin       # grafana用户名和密码<br>grafana_admin_password: admin<br><br><br>[root@ceph-1 group_vars]# cat osds.yml <br>---<br>dummy:<br>devices:        # 每个节点上用作osd的磁盘<br>  - /dev/vdb<br>  - /dev/vdc<br>osd_auto_discovery: false       <br><br></code></pre></td></tr></table></figure>



<h2 id="9、开始部署"><a href="#9、开始部署" class="headerlink" title="9、开始部署"></a>9、开始部署</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">cd ceph-ansible-stable-6.0/<br>ansible-playbook -i hosts site.yml.sample  -vv <br></code></pre></td></tr></table></figure>

<p><img src="/2023/06/28/Ceph-ansible%E9%83%A8%E7%BD%B2ceph/image-20230628162633657.png"></p>
<h2 id="10、验证集群状态"><a href="#10、验证集群状态" class="headerlink" title="10、验证集群状态"></a>10、验证集群状态</h2><p><img src="/2023/06/28/Ceph-ansible%E9%83%A8%E7%BD%B2ceph/image-20230628183209763.png"></p>
]]></content>
      <categories>
        <category>ceph</category>
        <category>ansible</category>
      </categories>
  </entry>
  <entry>
    <title>kolla部署openstack-Yoga</title>
    <url>/2023/06/16/kolla%E9%83%A8%E7%BD%B2openstack-Yoga/</url>
    <content><![CDATA[<p>系统：Rocky Linux release 9.2</p>
<h1 id="一、基础环境配置"><a href="#一、基础环境配置" class="headerlink" title="一、基础环境配置"></a>一、基础环境配置</h1><h2 id="1-1、修改主机名-amp-hosts映射"><a href="#1-1、修改主机名-amp-hosts映射" class="headerlink" title="1.1、修改主机名 &amp; hosts映射"></a>1.1、修改主机名 &amp; hosts映射</h2><p>填写 /etc/hosts（所有节点）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">cat &gt;&gt; /etc/hosts &lt;&lt;EOF<br>192.168.1.8 openstack01<br>192.168.1.7 openstack02<br>192.168.1.4 openstack03<br>EOF<br></code></pre></td></tr></table></figure>



<h2 id="1-2、yum源设置"><a href="#1-2、yum源设置" class="headerlink" title="1.2、yum源设置"></a>1.2、yum源设置</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">sed -e &#x27;s|^mirrorlist=|#mirrorlist=|g&#x27;     -e &#x27;s|^#baseurl=http://dl.rockylinux.org/$contentdir|baseurl=https://mirrors.aliyun.com/rockylinux|g&#x27;     -i.bak     /etc/yum.repos.d/rocky-*.repo<br><br>yum clean all <br>yum makecache<br></code></pre></td></tr></table></figure>



<h2 id="1-3、禁用防火墙-amp-amp-打开centos路由转发"><a href="#1-3、禁用防火墙-amp-amp-打开centos路由转发" class="headerlink" title="1.3、禁用防火墙 &amp;&amp; 打开centos路由转发"></a>1.3、禁用防火墙 &amp;&amp; 打开centos路由转发</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">systemctl stop firewalld &amp;&amp; systemctl disable firewalld &amp;&amp; setenforce 0<br>echo &quot;net.ipv4.ip_forward = 1&quot; &gt;&gt;/etc/sysctl.conf &amp;&amp; sysctl -p /etc/sysctl.conf<br></code></pre></td></tr></table></figure>



<h2 id="1-4、安装-openstack-软件仓库"><a href="#1-4、安装-openstack-软件仓库" class="headerlink" title="1.4、安装 openstack 软件仓库"></a>1.4、安装 openstack 软件仓库</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">dnf install -y centos-release-openstack-yoga<br>dnf -y update<br></code></pre></td></tr></table></figure>



<h2 id="1-5、安装-docker"><a href="#1-5、安装-docker" class="headerlink" title="1.5、安装 docker"></a>1.5、安装 docker</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">dnf config-manager --add-repo=https://download.docker.com/linux/centos/docker-ce.repo<br>dnf install -y docker-ce<br>systemctl enable --now docker<br></code></pre></td></tr></table></figure>



<h1 id="二、部署节点环境准备"><a href="#二、部署节点环境准备" class="headerlink" title="二、部署节点环境准备"></a>二、部署节点环境准备</h1><h2 id="2-1、安装-Python-构建依赖项"><a href="#2-1、安装-Python-构建依赖项" class="headerlink" title="2.1、安装 Python 构建依赖项"></a>2.1、安装 Python 构建依赖项</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">dnf install -y git  python3 sshpass tmux python3-devel libffi-devel gcc openssl-devel python3-libselinux python3-netaddr<br></code></pre></td></tr></table></figure>



<h2 id="2-2、获取部署脚本"><a href="#2-2、获取部署脚本" class="headerlink" title="2.2、获取部署脚本"></a>2.2、获取部署脚本</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">mkdir -p /opt/openstack &amp;&amp; cd /opt/openstack      # 创建安装目录<br>git clone -b stable/yoga https://opendev.org/openstack/kolla-ansible.git<br></code></pre></td></tr></table></figure>





<h2 id="2-3、生成kolla-ansible虚拟环境"><a href="#2-3、生成kolla-ansible虚拟环境" class="headerlink" title="2.3、生成kolla-ansible虚拟环境"></a>2.3、生成kolla-ansible虚拟环境</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">python3 -m venv /opt/openstack/venv<br>source /opt/openstack/venv/bin/activate   # 激活虚拟环境<br></code></pre></td></tr></table></figure>




<h2 id="2-4、安装-pip-amp-Ansible"><a href="#2-4、安装-pip-amp-Ansible" class="headerlink" title="2.4、安装 pip &amp; Ansible"></a>2.4、安装 pip &amp; Ansible</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">pip install -U pip <br>pip install &#x27;ansible&gt;=4,&lt;6&#x27;<br></code></pre></td></tr></table></figure>



<h2 id="2-5、检查openstack版本"><a href="#2-5、检查openstack版本" class="headerlink" title="2.5、检查openstack版本"></a>2.5、检查openstack版本</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">cd ./kolla-ansible<br>git checkout stable/yoga<br></code></pre></td></tr></table></figure>



<h2 id="2-6、安装相关依赖"><a href="#2-6、安装相关依赖" class="headerlink" title="2.6、安装相关依赖"></a>2.6、安装相关依赖</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">pip install .<br>cd ..<br></code></pre></td></tr></table></figure>



<h2 id="2-7、创建-etc-kolla目录"><a href="#2-7、创建-etc-kolla目录" class="headerlink" title="2.7、创建/etc/kolla目录"></a>2.7、创建/etc/kolla目录</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">mkdir -p /etc/kolla<br></code></pre></td></tr></table></figure>



<h2 id="2-8、复制配置文件"><a href="#2-8、复制配置文件" class="headerlink" title="2.8、复制配置文件"></a>2.8、复制配置文件</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">cp ./venv/share/kolla-ansible/etc_examples/kolla/* /etc/kolla<br>cp ./kolla-ansible/ansible/inventory/multinode ./inventory<br></code></pre></td></tr></table></figure>




<h2 id="2-9、安装-ansible-galaxy-依赖"><a href="#2-9、安装-ansible-galaxy-依赖" class="headerlink" title="2.9、安装 ansible galaxy 依赖"></a>2.9、安装 ansible galaxy 依赖</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">kolla-ansible install-deps<br></code></pre></td></tr></table></figure>





<h2 id="2-10、修改-ansible-配置文件"><a href="#2-10、修改-ansible-配置文件" class="headerlink" title="2.10、修改 ansible 配置文件"></a>2.10、修改 ansible 配置文件</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">mkdir -p /etc/ansible<br>cat &gt; /etc/ansible/ansible.cfg&lt;&lt;EOF<br>[defaults]<br>host_key_checking=False<br>pipelining=True<br>forks=100<br>log_path = /var/log/openstack-ansible.log<br><br>[privilege_escalation]<br>become = True<br>EOF<br></code></pre></td></tr></table></figure>





<h2 id="2-11、修改配置文件"><a href="#2-11、修改配置文件" class="headerlink" title="2.11、修改配置文件"></a>2.11、修改配置文件</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">vi ./inventory     # 修改inventory文件<br><br>[all:vars]<br><br>Host user name and password must be required if no ssh trust<br>ansible_connection=ssh<br><br>Using password<br>ansible_user=root<br>ansible_ssh_pass=123456<br><br>These initial groups are the only groups required to be modified. The<br>additional groups are for more control of the environment.<br>[control]<br><br>These hostname must be resolvable from your deployment host<br>openstack01<br>openstack02<br>openstack03<br><br>The above can also be specified as follows:<br><span class="hljs-meta prompt_">#</span><span class="language-bash">control[01:03]     ansible_user=kolla</span><br><br>The network nodes are where your l3-agent and loadbalancers will run<br>This can be the same as a host in the control group<br>[network]<br>openstack01<br>openstack02<br>openstack03<br><br>[compute]<br>openstack01<br>openstack02<br>openstack03<br><br>[monitoring]<br><span class="hljs-meta prompt_">#</span><span class="language-bash">monitoring01</span><br><br>When compute nodes and control nodes use different interfaces,<br>you need to comment out &quot;api_interface&quot; and other interfaces from the globals.yml<br>and specify like below:<br><span class="hljs-meta prompt_">#</span><span class="language-bash">compute01 neutron_external_interface=eth0 api_interface=em1 storage_interface=em1 tunnel_interface=em1</span><br>[storage:children]<br>control<br><br>[mons:children]<br>control<br><br>[osds:children]<br>compute<br><br>[grafana-server:children]<br>mons<br><br>[deployment]<br>localhost       ansible_connection=local<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">编辑安装文件</span><br><br>cat &gt;&gt; /opt/openstack/openstack.yml&lt;&lt;EOF   <br><br>离线 registry<br>docker_registry: &quot;10.0.10.11:4000&quot;<br>docker_registry_insecure: &quot;yes&quot;<br>kolla_base_distro: &quot;centos&quot;<br>kolla_install_type: &quot;source&quot;<br>network_interface: &quot;eth0&quot;<br>neutron_external_interface: &quot;eth1&quot;<br>kolla_internal_vip_address: &quot;172.240.12.50&quot;<br>enable_cinder: &quot;yes&quot;<br>enable_cinder_backup: &quot;no&quot;<br>关闭fluentd容器服务<br>enable_fluentd: &quot;no&quot;<br>enable_openvswitch: &quot;no&quot;<br>enable_heat: &quot;no&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">####实例高可用</span></span><br>enable_masakari: &quot;yes&quot;<br>enable_hacluster: &quot;yes&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">####trunk</span></span><br>enable_neutron_agent_ha: &quot;yes&quot;<br>enable_neutron_trunk: &quot;yes&quot;<br>enable_neutron_segments: &quot;yes&quot;<br><br>EOF<br><br><br>vi /etc/kolla/globals.yml     # 添加占位符<br><br>dummy:<br></code></pre></td></tr></table></figure>



<h2 id="2-12、生成kolla-密码"><a href="#2-12、生成kolla-密码" class="headerlink" title="2.12、生成kolla 密码"></a>2.12、生成kolla 密码</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">kolla-genpwd<br></code></pre></td></tr></table></figure>



<h2 id="2-13、检查主机连通性"><a href="#2-13、检查主机连通性" class="headerlink" title="2.13、检查主机连通性"></a>2.13、检查主机连通性</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">ansible -i ./inventory all -m ping<br></code></pre></td></tr></table></figure>



<h2 id="2-14、节点初始化-amp-节点检查"><a href="#2-14、节点初始化-amp-节点检查" class="headerlink" title="2.14、节点初始化 &amp; 节点检查"></a>2.14、节点初始化 &amp; 节点检查</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">kolla-ansible -i ./inventory -e @/opt/openstack/openstack.yml bootstrap-servers -vv<br><br>获取安装镜像<br>kolla-ansible -i inventory -e @/opt/openstack/openstack.yml pull -vv<br><br>kolla-ansible -i /opt/openstack/inventory -e @/opt/openstack/openstack.yml prechecks -vv <br></code></pre></td></tr></table></figure>



<p>-e prechecks_enable_host_ntp_checks=false</p>
<h2 id="2-15、正式部署"><a href="#2-15、正式部署" class="headerlink" title="2.15、正式部署"></a>2.15、正式部署</h2><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">kolla-ansible -i <span class="hljs-regexp">/opt/</span>openstack<span class="hljs-regexp">/inventory -e @/</span>opt<span class="hljs-regexp">/openstack/</span>openstack.yml deploy -vv<br><br>发布部署<br>kolla-ansible -i <span class="hljs-regexp">/opt/</span>openstack<span class="hljs-regexp">/inventory -e @/</span>opt<span class="hljs-regexp">/openstack/</span>openstack.yml post-deploy -vv<br><br></code></pre></td></tr></table></figure>



<h2 id="2-16、安装-openstack-client"><a href="#2-16、安装-openstack-client" class="headerlink" title="2.16、安装 openstack-client"></a>2.16、安装 openstack-client</h2><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">pip install python-openstackclient -c https:<span class="hljs-regexp">//</span>releases.openstack.org<span class="hljs-regexp">/constraints/u</span>pper/yoga<br>(-c 指定约束版本)<br></code></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>openstack</category>
      </categories>
      <tags>
        <tag>openstack</tag>
        <tag>kolla</tag>
      </tags>
  </entry>
  <entry>
    <title>openstack常用命令整理</title>
    <url>/2023/06/21/openstack%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="配额-「quota」"><a href="#配额-「quota」" class="headerlink" title="配额 「quota」"></a>配额 「quota」</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">openstack quota set --ram 1024 --instances 5 --cores 3 &#123;项目名&#125;     # 项目限制配额<br></code></pre></td></tr></table></figure>

<h2 id="虚拟机-「server」"><a href="#虚拟机-「server」" class="headerlink" title="虚拟机 「server」"></a>虚拟机 「server」</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">openstack console url show &#123;虚拟机名字&#125;<br>openstack server delete &#123;虚拟机名字&#125;<br>openstack server force-delete &#123;虚拟机名字&#125;       # 强制删除虚机<br>openstack server list / show  <br>openstack server resize      # 调整云主机大小<br>openstack server event list --long &#123;虚拟机 id&#125;    # 查询云主机的事件<br></code></pre></td></tr></table></figure>

<h2 id="搁置-「shelve」"><a href="#搁置-「shelve」" class="headerlink" title="搁置 「shelve」"></a>搁置 「shelve」</h2><p>对于一些长时间不使用的虚拟机，即使处于关机状态，仍然会占用着集群资源<br>如果需要释放这些资源,则使用shelve来操作,该操作会将server实例作为image保存到glance中,然后在宿主机中删除该server实例</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">openstack server shelve &#123;虚机id&#125;  # 机器开启搁置状态 （搁置状态：--status SHELVED_OFFLOADED ）<br>openstack server unshelve     # 取消搁置的机器<br></code></pre></td></tr></table></figure>

<h2 id="镜像-「image」"><a href="#镜像-「image」" class="headerlink" title="镜像 「image」"></a>镜像 「image」</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">共享私有镜像给其他项目<br><br>openstack image set --shared &#123;镜像id&#125;    # 镜像设置为共享<br>openstack image add project  &#123;镜像id&#125;  &#123;目标项目id&#125; <br>openstack role add --user &#123;&#125;  project_member --project  &#123;目标项目id&#125; <br><br>export OS_PROJECT_NAME=&#123;目标项目名&#125;       # 切换项目<br>openstack image set --accept &#123;目标镜像id&#125; <br>export OS_PROJECT_NAME=&#123;&#125;<br>openstack role remove --user &#123;&#125; project_member --project &#123;目标项目id&#125;<br><br>openstack image member list &#123;目标镜像id&#125;     # 验证是否共享成功<br><br>openstack image set  # 更新镜像<br></code></pre></td></tr></table></figure>



<h2 id="网络-「network」"><a href="#网络-「network」" class="headerlink" title="网络 「network」"></a>网络 「network」</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">openstack floating ip list <br><br>云主机添加无IP的网卡<br>openstack network list --project &#123;项目名&#125;    # 查看项目下网络<br><br>openstack port create  --network  &#123;网络id/name&#125;   &#123;端口名&#125;     在不指定IP地址的情况下创建一个端口<br><br>创建指定IP地址的端口<br>openstack port create --network net1 --fixed-ip subnet=subnet1,ip-address=192.0.2.40 &#123;端口名&#125;  <br><br>openstack port list <br>nova interface-attach --port-id  &#123;port id&#125;   &#123;server id&#125;   <br></code></pre></td></tr></table></figure>



<h2 id="支付者-「assignment」"><a href="#支付者-「assignment」" class="headerlink" title="支付者 「assignment」"></a>支付者 「assignment」</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">openstack role assignment list  --project  &#123;项目名&#125;  --name  # 查看用户的支付者<br></code></pre></td></tr></table></figure>



<h2 id="卷-「volume」"><a href="#卷-「volume」" class="headerlink" title="卷  「volume」"></a>卷  「volume」</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">openstack volume type list   # 查看卷类型<br>openstack volume set --state &#123;&#125;     # 改变云硬盘状态  <br>openstack volume backup list   # 查看云硬盘备份<br>openstack volume snapshot list --all --volume &#123; id/name &#125;<br><br>nova  volume-detach  &#123;云主机ID&#125; &#123;volume id&#125;     # 分离卷<br></code></pre></td></tr></table></figure>

<p>Volume 除了可以用作 instance 的数据盘，也可以作为启动盘（Bootable Volume）创建Volume时，选择Volume Source为image，创建后可以看到该volume是Bootable的，后可根据需求创建可启动volume</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">openstack volume create --image $IMAGE_ID --size $SIZE --type $TYPE --bootable $NAME<br></code></pre></td></tr></table></figure>



<h2 id="迁移-「migrate」"><a href="#迁移-「migrate」" class="headerlink" title="迁移  「migrate」"></a>迁移  「migrate」</h2><p>迁移的云主机若内存等资源使用率过高会导致热迁移实例写入内存页面的速度可能比复制它们的速度快<br>从而虚拟机产生了内存脏数据,无法完成迁移超时,虚拟机状态error</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">nova live-migration-force-complete 实例ID 迁移ID        # 强制迁移<br>nova server-migration-list 实例ID                  # 获取迁移的任务ID<br>nova live-migration-abort 实例ID 迁移ID                 # 取消迁移<br></code></pre></td></tr></table></figure>



<h2 id="负载均衡-「loadbalancer」"><a href="#负载均衡-「loadbalancer」" class="headerlink" title="负载均衡  「loadbalancer」"></a>负载均衡  「loadbalancer」</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">openstack loadbalancer list<br></code></pre></td></tr></table></figure>





<p><a href="https://access.redhat.com/documentation/zh-cn/red_hat_openstack_platform/17.0/html/command_line_interface_reference/index">redhat官方openstack命令行文档</a></p>
]]></content>
      <categories>
        <category>openstack</category>
      </categories>
      <tags>
        <tag>openstack</tag>
      </tags>
  </entry>
  <entry>
    <title>删除网卡自动分配的fix ip</title>
    <url>/2023/05/24/%E5%88%A0%E9%99%A4%E7%BD%91%E5%8D%A1%E8%87%AA%E5%8A%A8%E5%88%86%E9%85%8D%E7%9A%84fix-ip/</url>
    <content><![CDATA[<p>当我们想要给云主机添加第二块无 IP 的网卡时，需要云主机挂载上新的网卡接口，但是在挂载接口时，时常会dhcp自动的分配一个ip地址，此时我们需要给他删除掉分配的地址，让他成为一个没有IP地址的网卡</p>
<p>找出目标云主机的 port 列表（此处我需要移除 IP的是 192.168.2.6 ）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">openstack port list --server  1317ada5-231c-417f-9cc8-b6867591457e<br></code></pre></td></tr></table></figure>

<p><img src="/2023/05/24/%E5%88%A0%E9%99%A4%E7%BD%91%E5%8D%A1%E8%87%AA%E5%8A%A8%E5%88%86%E9%85%8D%E7%9A%84fix-ip/1.jpg"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">openstack  server  remove port $server_id  $port_id<br>openstack port set $port_id   --no-fixed-ip<br>openstack  server  add port $server_id  $port_id<br>openstack port list --server  41350a43-bd76-45fc-92ff-283e01c124fa<br></code></pre></td></tr></table></figure>

<p><img src="/2023/05/24/%E5%88%A0%E9%99%A4%E7%BD%91%E5%8D%A1%E8%87%AA%E5%8A%A8%E5%88%86%E9%85%8D%E7%9A%84fix-ip/2.jpg"></p>
]]></content>
      <categories>
        <category>openstack</category>
      </categories>
      <tags>
        <tag>openstack</tag>
      </tags>
  </entry>
</search>
